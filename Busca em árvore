/*Discente: Joice Jesus   Data:  Disciplina: Grafos
*/
#include<stdio.h>
#include<stdlib.h>

#define true 1
#define false 0
#define UGraph Graph

#define BRANCO 0 //não foi visitado;
#define AMARELO 1 //foi visitado;
#define VERMELHO 2 //vertice em que a busca foi finalizada.

struct adjacencia {
	int vertice;
	int peso;
	struct adjacencia *prox;
};

typedef struct adjacencia ADJACENCIA ;

struct vertice {
	/*Armazenamento dos Dados*/
	ADJACENCIA *cab;
};

typedef struct vertice VERTICE;

struct grafo {
	int vertices;
	int arestas;
	VERTICE *adj;
};

typedef struct grafo GRAFO;

GRAFO *cria_Grafo(int v) {
	GRAFO *g = (GRAFO *)malloc(sizeof(GRAFO));
	g->vertices = v;
	g->arestas = 0;
	g->adj = (VERTICE *)malloc(v*sizeof(VERTICE));
	int i;
	for(i=0; i<v; i++)
	g->adj[i].cab = NULL;
	return(g);
}
ADJACENCIA *cria_Adjacencia(int v, int peso) {
	ADJACENCIA *temp = (ADJACENCIA *)malloc(sizeof(ADJACENCIA));
	temp->vertice = v;
	temp->peso = peso;
	temp->prox = NULL;
	return(temp);
}
int cria_Aresta(GRAFO *gr, int vi, int vf, int p) {
	if(!gr)	return(false);
	if((vf < 0) || (vf >= gr->vertices))
	return(false);
	if((vi < 0) || (vi >= gr->vertices))
	return(false);
	ADJACENCIA *novo = cria_Adjacencia(vf,p);
	novo->prox = gr->adj[vi].cab;
	gr->adj[vi].cab = novo;
	gr->arestas++;
	return(true);
}
void imprime(GRAFO *gr) {
	//printf("Vertices: %d. Arestas: %d.\n", gr->vertices,gr->arestas);
	int i;
	for(i=0; i<gr->vertices; i++) {
	printf("v%d:",i);
	ADJACENCIA *ad = gr->adj[i].cab;
	while(ad) {
	printf("v%d(%d)", ad->vertice,ad->peso);
	ad = ad->prox;
	}
	printf("\n");
	}
}
//passo como paramentros o grafo, nó inicial e o aranjo de cores
void visitaP(GRAFO *g, int i, int *cor){
	cor[i]=AMARELO;//quando o nó é visitado marcamos como amarelo = 1
    ADJACENCIA *v = g->adj[i].cab;//visitamos em seguida a adjacencia do nó que acabamos de visitar e marcar como amarelo=1, todos os vertices v para os guais tem uma arestas(u,v)recursivamente
    while(v){
  	if(cor[v->vertice]==BRANCO)//se a cor for branca visitamos o vertice adj.
  	printf("\n Busca(%d): vertice %d visitado  %d",i,i,v->vertice);
    visitaP(g,v->vertice,cor);
	v=v->prox;
	}
    cor[i]=VERMELHO;//terminou de visitar todas as adjacencias de u, o finalizamos marcando de vermelho.
}
void profundidade(GRAFO *g){
    int cor[g->vertices];//o indice do vertice no arranjo adj em Grafo é igual ao mesmo arranjo cor(ex: vertice na posição 0 em GRAFO a cor dele está na posição 0 em cor).
    int i;
    
    //inicializamos todos os verteces com branco ou 0.
    for(i=0;i<g->vertices;i++){
        cor[i]=BRANCO;
    }
    /*verifico se todos os verteces são brancos, para garantir que uma
    ves esgotada uma arvore de busca, a busca seja reiniciada de algum outro vertice não visitado, ou seja Branco=0*/
    for(i=0;i<g->vertices;i++){
    if(cor[i]==BRANCO)
    visitaP(g,i,cor);
    }
}
int main(void){
	int n;
	GRAFO *gr = cria_Grafo(8);//numero de vertices do grafo
	cria_Aresta(gr,1,2,0);//cria arestas e o peso
	cria_Aresta(gr,1,5,0);
	cria_Aresta(gr,2,3,0);
	cria_Aresta(gr,2,5,0);
	cria_Aresta(gr,3,4,0);
	cria_Aresta(gr,4,5,0);
	cria_Aresta(gr,4,6,0);
	cria_Aresta(gr,6,7,0);
	imprime(gr);
	profundidade(gr);
	
	return 0;
}
